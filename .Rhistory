data.table::fwrite(ras_catalog_dbase,file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep), row.names = FALSE)
process_count = process_count + 1
} else {
if(!quiet) { print("Model with inital scrape name already in the que") }
duplicate_count = duplicate_count + 1
}
next()
}
# Attempt to parse the g file
g_pts <- list()
g_pts[[1]] <- data.frame()
g_pts = process_ras_g_to_xyz(
geom_path=g_file,
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=!chatty)
g_pts
# Record errors for comp
if(nrow(g_pts[[1]]) > 0) {
if(vdat_trans) {
g_ptserr <- unglue::unglue_vec(g_pts[[2]], "{}:{}:{x}") %>% as.numeric()
} else {
g_ptserr <- unglue::unglue_vec(g_pts[[2]],"{}:{x}") %>% as.numeric()
}
}
ghdf_pts <- list()
ghdf_pts[[1]] <- data.frame()
if(cond3) {
ghdf_pts = process_ras_hdf_to_xyz(
geom_path=paste0(g_file,".hdf"),
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=!chatty)
# Record errors for comp
if(nrow(ghdf_pts[[1]]) > 0) {
if(vdat_trans) {
ghdf_ptserr <- unglue::unglue_vec(ghdf_pts[[2]], "{}:{}:{x}") %>% as.numeric()
} else {
ghdf_ptserr <- unglue::unglue_vec(ghdf_pts[[2]],"{}:{x}") %>% as.numeric()
}
}
}
cond4 = nrow(g_pts[[1]]) > 0
cond5 = nrow(ghdf_pts[[1]]) > 0
cond4
cond5
if(cond4 & cond5) {
if(abs(ghdf_ptserr) > abs(g_ptserr)) {
extrated_pts <- g_pts
extrated_pts[[2]] <- paste(g_pts[[2]],"* G parsed")
} else {
extrated_pts <- ghdf_pts
extrated_pts[[2]] <- paste(ghdf_pts[[2]],"* GHDF parsed")
}
# We could only parse a g file
} else if(cond4) {
extrated_pts <- g_pts
# We could only parse a ghdf file
} else if(cond5) {
extrated_pts <- ghdf_pts
# Nothing was parsed
} else if(!cond4 & !cond5) {
current_initial_name <- paste0("unknown_",current_model_name,"_",current_g_value,"_",current_last_modified)
current_final_name_key <- NA
if(sum(stringr::str_detect(na.omit(ras_catalog_dbase$initial_scrape_name), current_initial_name)) == 0) {
new_row <- data.table::data.table(current_nhdplus_comid,current_model_name,current_g_value,current_last_modified,code_to_place_in_source,current_model_units,current_model_projection,current_initial_name,
current_final_name_key,"unparsed_units_proj")
names(new_row) <- names
ras_catalog_dbase <- data.table::rbindlist(list(ras_catalog_dbase,new_row))
dir.create(file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep), showWarnings = FALSE, recursive = TRUE)
file.copy(c(g_file ,paste0(g_file,".hdf") ,p_files ,f_files ,h_files, v_files, prj_files,o_files,r_files,u_files,x_files,rasmap_files),
file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep))
data.table::fwrite(ras_catalog_dbase,file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep), row.names = FALSE)
process_count = process_count + 1
} else {
if(!quiet) { print("Model with inital scrape name already in the que") }
duplicate_count = duplicate_count + 1
}
next()
}
ls = sfheaders::sf_linestring(
obj = extrated_pts[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
end_points <- sf::st_coordinates(extrated_pts[[1]]) %>%
as.data.frame() %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
extrated_pts
sf::st_coordinates(extrated_pts[[1]])
extrated_pts[[1]]
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
extrated_pts[[1]]
c(ls %>% lwgeom::st_endpoint(), ls %>% lwgeom::st_startpoint())
sf::st_coordinates(ls) %>%
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/CEDAR HOLLOW CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
# top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase"
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/CEDAR HOLLOW CREEK"
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK"
code_to_place_in_source="FEMA 6 BLE"
proj_overwrite="EPSG:2277"
vdat_trans=FALSE
quiet=FALSE
chatty = TRUE
quick_check=TRUE
ping_me = TRUE
overwrite = FALSE
refresh = TRUE
## -- Start --
fn_time_start <- Sys.time()
if(!quiet) {
print(glue::glue("Parsing {top_of_dir_to_scrape} to place in {path_to_ras_dbase}"))
}
# Global constants
names <- c("nhdplus_comid","model_name","g_file","last_modified","source","units","crs","initial_scrape_name","final_name_key","notes")
process_count = 0
skip_count = 0
duplicate_count = 0
# Load past runs
if(file.exists(file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep))) {
ras_catalog_dbase = load_catalog_csv_as_DT(file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep), quiet = quiet)
} else {
if (!quiet) { print('Constructing ras database structure') }
dir.create(file.path(path_to_ras_dbase,"models",fsep = .Platform$file.sep), showWarnings = FALSE)
dir.create(file.path(path_to_ras_dbase,"models","_unprocessed",fsep = .Platform$file.sep), showWarnings = FALSE, recursive=TRUE)
ras_catalog_dbase <- data.frame(matrix(ncol = 10, nrow = 0))
colnames(ras_catalog_dbase) <- names
ras_catalog_dbase <- data.table::as.data.table(ras_catalog_dbase)
ras_catalog_dbase[,nhdplus_comid := as.character(nhdplus_comid)]
ras_catalog_dbase[,final_name_key := as.character(final_name_key)]
}
# Find a list of all the .prj files
list_of_prj_files <- list.files(top_of_dir_to_scrape, pattern = glob2rx("*.prj$"), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
n_files_to_process <- length(list_of_prj_files)
if(!quiet) { print(glue::glue("Found {n_files_to_process} potential ras files")) }
# For each prj file:
l = 1
file <- list_of_prj_files[l]
dir_of_file <- dirname(file)
current_model_name <- gsub('.{4}$', '', basename(file))
current_nhdplus_comid = NA
current_model_units = NA
current_model_projection = NA
current_last_modified = as.integer(as.POSIXct(file.info(file)$mtime))
if (!quiet) {
print(glue::glue("File {l} of {n_files_to_process}"))
print(glue::glue("Processing {current_model_name} model"))
}
# Files to copy around
g_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.g??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
ghdf_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.g??.hdf$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
f_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.f??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
h_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.h??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
v_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.v??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
o_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.o??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
r_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.r??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
u_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.u??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
x_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.x??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
rasmap_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.rasmap$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
prj_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.prj$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
p_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.p??$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
p_files <- p_files[!p_files %in% prj_files]
list_of_files <- c(g_files ,ghdf_files ,p_files ,f_files ,h_files, v_files, prj_files,o_files,r_files,u_files,x_files,rasmap_files)
if(length(g_files) == 0) {
if(!quiet) {
print_warning_block()
print(glue::glue('No geometry found for model:{file}'))
skip_count = skip_count + 1
}
next
}
# populate what we can from a projection file and project file
for(potential_file in prj_files) {
# potential_file <- prj_files[1]
file_text <- read.delim(potential_file, header = FALSE)
if(any(c('PROJCS','GEOGCS','DATUM','PROJECTION') == file_text)) {
if(!quiet) { print('found a projection') }
current_model_projection = sf::st_crs(potential_file)
} else if(grepl("SI Units", file_text, fixed = TRUE)) {
current_last_modified = as.integer(as.POSIXct(file.info(potential_file)$mtime))
current_model_units = "Meter"
} else if(grepl("English Units", file_text, fixed = TRUE)) {
current_last_modified = as.integer(as.POSIXct(file.info(potential_file)$mtime))
current_model_units = "Foot"
}
}
if(is.na(current_model_projection) & !is.null(proj_overwrite)) {
current_model_projection = proj_overwrite
}
g_file <- g_files[1]
current_g_value <- stringr::str_sub(g_file,-3,-1)
if(quick_check) {
if(stringr::str_sub(basename(g_file), end = -5) %in% ras_catalog_dbase$model_name) {
if(!quiet) { print("Model with inital scrape name already in the que") }
duplicate_count = duplicate_count + 1
next()
}
}
# Do we have enough info to parse the file at this point?
cond1 = !is.na(current_model_units)
cond2 = !is.na(current_model_projection)
cond3 = file.exists(paste0(g_file,".hdf"))
# We don't know either the projection or the units and can't parse this yet
if(!(cond1 & cond2)) {
current_initial_name <- paste0("unknown_",current_model_name,"_",current_g_value,"_",current_last_modified)
current_final_name_key <- NA
if(sum(stringr::str_detect(na.omit(ras_catalog_dbase$initial_scrape_name), current_initial_name)) == 0) {
new_row <- data.table::data.table(current_nhdplus_comid,current_model_name,current_g_value,current_last_modified,code_to_place_in_source,current_model_units,current_model_projection,current_initial_name,current_final_name_key,"unparsed_units_proj")
names(new_row) <- names
ras_catalog_dbase <- data.table::rbindlist(list(ras_catalog_dbase,new_row))
dir.create(file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep), showWarnings = FALSE, recursive = TRUE)
file.copy(c(g_file ,paste0(g_file,".hdf") ,p_files ,f_files ,h_files, v_files, prj_files,o_files,r_files,u_files,x_files,rasmap_files),
file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep))
data.table::fwrite(ras_catalog_dbase,file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep), row.names = FALSE)
process_count = process_count + 1
} else {
if(!quiet) { print("Model with inital scrape name already in the que") }
duplicate_count = duplicate_count + 1
}
next()
}
# Attempt to parse the g file
g_pts <- list()
g_pts[[1]] <- data.frame()
g_pts = process_ras_g_to_xyz(
geom_path=g_file,
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=!chatty)
# Record errors for comp
if(nrow(g_pts[[1]]) > 0) {
if(vdat_trans) {
g_ptserr <- unglue::unglue_vec(g_pts[[2]], "{}:{}:{x}") %>% as.numeric()
} else {
g_ptserr <- unglue::unglue_vec(g_pts[[2]],"{}:{x}") %>% as.numeric()
}
}
# Attempt to parse the ghdf file
ghdf_pts <- list()
ghdf_pts[[1]] <- data.frame()
if(cond3) {
ghdf_pts = process_ras_hdf_to_xyz(
geom_path=paste0(g_file,".hdf"),
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=!chatty)
# Record errors for comp
if(nrow(ghdf_pts[[1]]) > 0) {
if(vdat_trans) {
ghdf_ptserr <- unglue::unglue_vec(ghdf_pts[[2]], "{}:{}:{x}") %>% as.numeric()
} else {
ghdf_ptserr <- unglue::unglue_vec(ghdf_pts[[2]],"{}:{x}") %>% as.numeric()
}
}
}
cond4 = nrow(g_pts[[1]]) > 0
cond5 = nrow(ghdf_pts[[1]]) > 0
# If we could parse both, which was a better extraction?
if(cond4 & cond5) {
if(abs(ghdf_ptserr) > abs(g_ptserr)) {
extrated_pts <- g_pts
extrated_pts[[2]] <- paste(g_pts[[2]],"* G parsed")
} else {
extrated_pts <- ghdf_pts
extrated_pts[[2]] <- paste(ghdf_pts[[2]],"* GHDF parsed")
}
# We could only parse a g file
} else if(cond4) {
extrated_pts <- g_pts
# We could only parse a ghdf file
} else if(cond5) {
extrated_pts <- ghdf_pts
# Nothing was parsed
} else if(!cond4 & !cond5) {
current_initial_name <- paste0("unknown_",current_model_name,"_",current_g_value,"_",current_last_modified)
current_final_name_key <- NA
if(sum(stringr::str_detect(na.omit(ras_catalog_dbase$initial_scrape_name), current_initial_name)) == 0) {
new_row <- data.table::data.table(current_nhdplus_comid,current_model_name,current_g_value,current_last_modified,code_to_place_in_source,current_model_units,current_model_projection,current_initial_name,
current_final_name_key,"unparsed_units_proj")
names(new_row) <- names
ras_catalog_dbase <- data.table::rbindlist(list(ras_catalog_dbase,new_row))
dir.create(file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep), showWarnings = FALSE, recursive = TRUE)
file.copy(c(g_file ,paste0(g_file,".hdf") ,p_files ,f_files ,h_files, v_files, prj_files,o_files,r_files,u_files,x_files,rasmap_files),
file.path(path_to_ras_dbase,"models","_unprocessed",current_initial_name,fsep = .Platform$file.sep))
data.table::fwrite(ras_catalog_dbase,file.path(path_to_ras_dbase,"accounting.csv",fsep = .Platform$file.sep), row.names = FALSE)
process_count = process_count + 1
} else {
if(!quiet) { print("Model with inital scrape name already in the que") }
duplicate_count = duplicate_count + 1
}
next()
}
# Footprint the points we extracted
ls = sfheaders::sf_linestring(
obj = extrated_pts[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
#
if(quick_hull) {
end_points <- c(ls %>% lwgeom::st_endpoint(), ls %>% lwgeom::st_startpoint())
end_points <- sf::st_coordinates(end_points) %>%
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
} else {
end_points <- sf::st_coordinates(ls) %>%
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
}
quick_hull = FALSE
ls
end_points
if(quick_hull) {
end_points <- c(ls %>% lwgeom::st_endpoint(), ls %>% lwgeom::st_startpoint())
end_points <- sf::st_coordinates(end_points) %>%
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
} else {
end_points <- sf::st_coordinates(ls) %>%
as.data.frame(extrated_pts[[1]]) %>%
dplyr::group_by(X,Y) %>%
dplyr::distinct() %>%
sf::st_as_sf(coords = c("X","Y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs("EPSG:4326"))
}
ahull_poly = holyhull::holyhull(sf_frame=end_points,method='convave',alpha_value=0.01, concavity = 2, length_threshold = 0)
mapview::mapview(ahull_poly)
current_nhdplus_comid = nhdplusTools::get_nhdplus(AOI::aoi_get(ahull_poly),realization = "flowline")
current_nhdplus_comid
try(current_nhdplus_comid = nhdplusTools::get_nhdplus(AOI::aoi_get(ahull_poly),realization = "flowline"), silent = TRUE)
try(
(current_nhdplus_comid = nhdplusTools::get_nhdplus(AOI::aoi_get(ahull_poly),realization = "flowline")),
silent = TRUE
)
current_nhdplus_comid
length(current_nhdplus_comid) == 0
is.na(current_nhdplus_comid)
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
# top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/newer_ras_dbase",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
# top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/reruns",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
# top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = TRUE,
overwrite = FALSE,
refresh = TRUE)
sinew::moga(file.path(getwd(),"R/append_catalog_fields.R"),overwrite = TRUE)
sinew::moga(file.path(getwd(),"R/dedupe.R"),overwrite = TRUE)
sinew::moga(file.path(getwd(),"R/dedupe.R"),overwrite = TRUE)
sinew::moga(file.path(getwd(),"R/ingest_into_database.R"),overwrite = TRUE)
sinew::moga(file.path(getwd(),"R/load_catalog_csv_as_DT.R"),overwrite = TRUE)
sinew::moga(file.path(getwd(),"R/map_library.R"),overwrite = TRUE)
# file.exists("/home/rstudio/g/Dropbox/root/database/hosted/water/HUC8.fgb")
rm(list = ls(all.names = TRUE))
gc()
devtools::load_all()
RRASSLER::ingest_into_database(
path_to_ras_dbase="C:/Users/jimma/Desktop/data/reruns",
top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301",
# top_of_dir_to_scrape="C:/Users/jimma/Desktop/data/BLE/FEMA/12090301/12090301_Models/Model/Walnut Creek-Colorado River/ELM CREEK",
code_to_place_in_source="FEMA 6 BLE",
proj_overwrite="EPSG:2277",
vdat_trans=FALSE,
quiet=FALSE,
chatty = TRUE,
quick_check=TRUE,
quick_hull = FALSE,
ping_me = "jamesmcoll@gmail.com",
overwrite = FALSE,
refresh = TRUE)
