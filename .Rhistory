ggplot2::geom_point(data=subset(tmp_1, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fec44f")) +
ggplot2::geom_line(data=subset(tmp_2, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fe9929"), linewidth=0.43) +
ggplot2::geom_point(data=subset(tmp_2, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fe9929")) +
ggplot2::xlab("pt_id (m)") +
ggplot2::ylab("z (m)") +
ggplot2::scale_color_identity(name = '',breaks = c('#fec44f', '#fe9929'),labels = c("G File", "HDF File"),guide = 'legend') +
ggplot2::theme_light()
union_plot
ghdf_plot
h_plot
g_hull
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leafem::addFeatures(pointshdf, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(pointshdf[pointshdf$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(p_hlines,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
pointshdf
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leafem::addFeatures(p_hlines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_hlines[p_hlines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(ghdf_hull,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
mapview::mapshot(m,file=file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png')))
if(!isFALSE(g_extract[[1]]) & grepl("g", plots_wanted, fixed = TRUE)) {
number_of_cs <- nrow(g_extract[[3]])
pointsdf <- data.table::as.data.table(points)
pointsdf <- pointsdf[, c("xid_length","n","source","geometry"):=NULL]
p_lines <- sf::st_transform(g_extract[[3]],st_crs("EPSG:4326"))
for(id in 1:number_of_cs) {
print(glue::glue("Printing {id} of {number_of_cs}"))
# id='1'
if(add_terrain) {
pts_sub = pointsdf[pointsdf$xid == id,]
g_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), colour="#fec44f") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
t_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(y = DEM_z), linewidth=0.43, colour="#fe9929") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(y = DEM_z), colour="#fe9929") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
union_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fec44f"),linewidth=0.43) +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fec44f")) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(x=xid_d,y = DEM_z, colour="#fe9929"), linewidth=0.43) +
ggplot2::geom_point(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(x=xid_d,y = DEM_z, colour="#fe9929")) +
ggplot2::xlab("pt_id (m)") +
ggplot2::ylab("z (m)") +
ggplot2::scale_color_identity(name = '',breaks = c('#fec44f', '#fe9929'),labels = c("G File", "3DEP (USGS_Seamless_DEM_13)"),guide = 'legend') +
ggplot2::theme_light()
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
mapview::mapshot(m,file=file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png')))
title <- cowplot::ggdraw() + cowplot::draw_label(glue::glue("XS id: {id} from model: {basename(gfile_path)}"), fontface='bold')
main_grid <- cowplot::plot_grid(
g_plot + ggplot2::ggtitle("Parsed from G file") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
t_plot + ggplot2::ggtitle("DEM values") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
union_plot + ggplot2::ggtitle("Overlayed data") + ggplot2::theme(legend.position="bottom",plot.title = ggplot2::element_text(hjust = 1.0)),
ggplot2::ggplot() + ggplot2::ggtitle("Selected XS") + cowplot::draw_image(image = magick::image_read(file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png'))),scale = 1.2) + ggplot2::theme_void() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
align = "hv",
axis = 'tblr',
# label_fontface = "bold",
# label_fontfamily = "Times New Roman",
label_size = 8,
rel_widths = c(1, 1),
rel_heights = c(1,1),
ncol = 2,
nrow = 2,
hjust = 0.5,
vjust = 0.5
# label_x = 0.01
)
final_plot <- cowplot::plot_grid(title,
main_grid,
ncol=1,
rel_heights=c(0.1, 1))
ggplot2::ggsave(
filename = glue::glue("{id}.png"),
plot = final_plot,
device = "png",
path = file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep),
scale = 4,
width = 600,
height = 810,
units = "px",
dpi = 300,
bg = "white"
)
} else {
pts_sub = pointsdf[pointsdf$xid == id,]
g_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), colour="#fec44f") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
mapview::mapshot(m,file=file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png')))
title <- cowplot::ggdraw() + cowplot::draw_label(glue::glue("XS id: {id} from model: {basename(gfile_path)}"), fontface='bold')
main_grid <- cowplot::plot_grid(
g_plot + ggplot2::ggtitle("Parsed from G file") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
ggplot2::ggplot() + ggplot2::ggtitle("Selected XS") + cowplot::draw_image(image = magick::image_read(file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png'))),scale = 1.2) + ggplot2::theme_void() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
align = "hv",
axis = 'tblr',
# label_fontface = "bold",
# label_fontfamily = "Times New Roman",
label_size = 8,
rel_widths = c(1, 1),
rel_heights = c(1,1),
ncol = 2,
nrow = 1,
hjust = 0.5,
vjust = 0.5
# label_x = 0.01
)
final_plot <- cowplot::plot_grid(title,
main_grid,
ncol=1,
rel_heights=c(0.1, 1))
ggplot2::ggsave(
filename = glue::glue("{id}.png"),
plot = final_plot,
device = "png",
path = file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep),
scale = 4,
width = 600,
height = 310,
units = "px",
dpi = 300,
bg = "white"
)
}
}
unlink(list.files(file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep), pattern=utils::glob2rx("temp_*.png$"), full.names=TRUE, ignore.case=TRUE, recursive=TRUE))
}
devtools::load_all()
gfile_path=NULL
path_to_ras_dbase=NULL
excel_row=NULL
units_overwrite=NULL
proj_overwrite=NULL
vdat_trans=FALSE
plots_wanted="ghcol"
add_terrain = FALSE
add_terrain = TRUE
outpath=NULL
overwrite=TRUE
quiet=FALSE
gfile_path="C:/Users/jimma/Desktop/data/BLE/fema/12090301_realsmall/WILLBARGER 0035/WILLBARGER 0035.g01"
proj_overwrite="EPSG:2277"
outpath="C:/Users/jimma/Desktop/map"
elev_url = "/vsicurl/https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/TIFF/USGS_Seamless_DEM_13.vrt"
base_text_size = 11
if(is.null(outpath)) {
if(!is.null(gfile_path)) {
outpath <- dirname(gfile_path)
} else {
row = excel_row - 1
ras_catalog_dbase = load_catalog_csv_as_DT(file.path(path_to_ras_dbase,"model_catalog.csv",fsep = .Platform$file.sep))
if(ras_catalog_dbase[row,final_name_key]=="") {
path <- file.path(path_to_ras_dbase,"models","_unprocessed",ras_catalog_dbase[row,inital_scrape_name],glue::glue("{ras_catalog_dbase[row,model_name]}.{ras_catalog_dbase[row,g_file]}.hdf"),fsep = .Platform$file.sep)
current_path <- file.path(path_to_ras_dbase,"models","_unprocessed",ras_catalog_dbase[row,inital_scrape_name],fsep = .Platform$file.sep)
} else {
path <- file.path(path_to_ras_dbase,"models",ras_catalog_dbase[row,final_name_key],glue::glue("{ras_catalog_dbase[row,model_name]}.{ras_catalog_dbase[row,g_file]}.hdf"),fsep = .Platform$file.sep)
current_path <- file.path(path_to_ras_dbase,"models",ras_catalog_dbase[row,final_name_key],fsep = .Platform$file.sep)
}
outpath <- current_path
}
}
if(length(list.files(file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep),full.names = TRUE,recursive = TRUE))>0) {
if(!overwrite) {
print("Prior extract found there and overwrite is false")
return(FALSE)
}
unlink(file.path(outpath,"RRASSLER_images",fsep = .Platform$file.sep), recursive=TRUE)
}
dir.create(file.path(outpath,"RRASSLER_images",fsep = .Platform$file.sep), recursive=TRUE, showWarnings = FALSE)
if(!is.null(gfile_path)) {
dir_of_file <- dirname(gfile_path)
current_model_name <- gsub('.{4}$', '', basename(gfile_path))
prj_files <- list.files(dir_of_file, pattern=utils::glob2rx(glue::glue("{current_model_name}.prj$")), full.names=TRUE, ignore.case=TRUE, recursive=TRUE)
current_model_units = NA
current_model_projection = NA
# current_model_projection = "ESRI:102651"  # current_model_projection = "EPSG:2277"  current_model_projection = "EPSG:26915"
current_last_modified = as.integer(as.POSIXct(file.info(gfile_path)$mtime))
for(potential_file in prj_files) {
# potential_file <- prj_files[1]
file_text <- read.delim(potential_file, header = FALSE)
if(any(c('PROJCS','GEOGCS','DATUM','PROJECTION') == file_text)) {
# print('found a projection')
current_model_projection = sf::st_crs(potential_file)
} else if(grepl("SI Units", file_text, fixed = TRUE)) {
current_last_modified = as.integer(as.POSIXct(file.info(potential_file)$mtime))
current_model_units = "Meter"
} else if(grepl("English Units", file_text, fixed = TRUE)) {
current_last_modified = as.integer(as.POSIXct(file.info(potential_file)$mtime))
current_model_units = "Foot"
}
}
# print(glue::glue("before g units:{current_model_units}"))
if(is.na(current_model_projection) & !is.null(proj_overwrite)) {
current_model_projection = proj_overwrite
}
if(is.na(current_model_units) & !is.null(units_overwrite)) {
current_model_units = units_overwrite
}
} else {
row = excel_row - 1
ras_catalog_dbase = load_catalog_csv_as_DT(file.path(path_to_ras_dbase,"model_catalog.csv",fsep = .Platform$file.sep))
if(ras_catalog_dbase[row,final_name_key]=="") {
path <- file.path(path_to_ras_dbase,"models","_unprocessed",ras_catalog_dbase[row,inital_scrape_name],glue::glue("{ras_catalog_dbase[row,model_name]}.{ras_catalog_dbase[row,g_file]}.hdf"),fsep = .Platform$file.sep)
current_path <- file.path(path_to_ras_dbase,"models","_unprocessed",ras_catalog_dbase[row,inital_scrape_name],fsep = .Platform$file.sep)
} else {
path <- file.path(path_to_ras_dbase,"models",ras_catalog_dbase[row,final_name_key],glue::glue("{ras_catalog_dbase[row,model_name]}.{ras_catalog_dbase[row,g_file]}.hdf"),fsep = .Platform$file.sep)
current_path <- file.path(path_to_ras_dbase,"models",ras_catalog_dbase[row,final_name_key],fsep = .Platform$file.sep)
}
print(glue::glue("processing {path}"))
current_model_units = ras_catalog_dbase[row,units]
current_model_projection = ras_catalog_dbase[row,crs]
current_last_modified = ras_catalog_dbase[row,last_modified]
}
g_extract <- process_ras_g_to_xyz(
geom_path=gfile_path,
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=FALSE)
if(!isFALSE(g_extract[[1]])) {
g_extract[[3]] = sfheaders::sf_linestring(
obj = g_extract[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
}
if(file.exists(paste0(gfile_path,".hdf"))) {
hdf_extract <- process_ras_hdf_to_xyz(
geom_path=paste0(gfile_path,".hdf"),
units=current_model_units,
proj_string=current_model_projection,
in_epoch_override=current_last_modified,
vdat = vdat_trans,
quiet=FALSE)
if(!isFALSE(hdf_extract[[1]])) {
hdf_extract[[3]] = sfheaders::sf_linestring(
obj = hdf_extract[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
}
}
if(!isFALSE(g_extract[[1]])) {
g_extract[[3]] = sfheaders::sf_linestring(
obj = g_extract[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
points <- g_extract[[1]] %>%
sf::st_as_sf(coords = c("x","y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs(terra::rast(elev_url)))
g_hull <- holyhull::holyhull(sf_frame=points,method='convave',alpha_value=0.01, concavity = 2, length_threshold = 0)
if(add_terrain) {
surface <- opendap.catalog::dap(URL = elev_url, AOI = g_hull %>% sf::st_buffer(60))
points$DEM_z <-  raster::extract(raster::raster(surface), points,method='simple')
}
}
if(!isFALSE(hdf_extract[[1]])) {
hdf_extract[[3]] = sfheaders::sf_linestring(
obj = hdf_extract[[1]]
, x = "x"
, y = "y"
# , z = "z"
, linestring_id = "xid"
, keep = FALSE
) |> sf::st_set_crs(sf::st_crs("EPSG:6349"))
pointshdf <- hdf_extract[[1]] %>%
sf::st_as_sf(coords = c("x","y")) %>%
sf::st_set_crs(sf::st_crs("EPSG:6349")) %>%
sf::st_transform(sf::st_crs(terra::rast(elev_url)))
ghdf_hull <- holyhull::holyhull(sf_frame=pointshdf,method='convave',alpha_value=0.01, concavity = 2, length_threshold = 0)
if(add_terrain) {
surface <- opendap.catalog::dap(URL = elev_url, AOI = ghdf_hull %>% sf::st_buffer(60))
pointshdf$DEM_z <-  raster::extract(raster::raster(surface), pointshdf,method='simple')
}
}
# Autoplots: roll out
# G desired
if(!isFALSE(g_extract[[1]]) & grepl("g", plots_wanted, fixed = TRUE)) {
number_of_cs <- nrow(g_extract[[3]])
pointsdf <- data.table::as.data.table(points)
pointsdf <- pointsdf[, c("xid_length","n","source","geometry"):=NULL]
p_lines <- sf::st_transform(g_extract[[3]],st_crs("EPSG:4326"))
for(id in 1:number_of_cs) {
print(glue::glue("Printing {id} of {number_of_cs}"))
# id='1'
if(add_terrain) {
pts_sub = pointsdf[pointsdf$xid == id,]
g_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), colour="#fec44f") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
t_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(y = DEM_z), linewidth=0.43, colour="#fe9929") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(y = DEM_z), colour="#fe9929") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
union_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fec44f"),linewidth=0.43) +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(x=xid_d,y = z, colour="#fec44f")) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(x=xid_d,y = DEM_z, colour="#fe9929"), linewidth=0.43) +
ggplot2::geom_point(data=subset(pts_sub, !is.na(DEM_z)),ggplot2::aes(x=xid_d,y = DEM_z, colour="#fe9929")) +
ggplot2::xlab("pt_id (m)") +
ggplot2::ylab("z (m)") +
ggplot2::scale_color_identity(name = '',breaks = c('#fec44f', '#fe9929'),labels = c("G File", "3DEP (USGS_Seamless_DEM_13)"),guide = 'legend') +
ggplot2::theme_light()
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
mapview::mapshot(m,file=file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png')))
title <- cowplot::ggdraw() + cowplot::draw_label(glue::glue("XS id: {id} from model: {basename(gfile_path)}"), fontface='bold')
main_grid <- cowplot::plot_grid(
g_plot + ggplot2::ggtitle("Parsed from G file") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
t_plot + ggplot2::ggtitle("DEM values") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
union_plot + ggplot2::ggtitle("Overlayed data") + ggplot2::theme(legend.position="bottom",plot.title = ggplot2::element_text(hjust = 1.0)),
ggplot2::ggplot() + ggplot2::ggtitle("Selected XS") + cowplot::draw_image(image = magick::image_read(file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png'))),scale = 1.2) + ggplot2::theme_void() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
align = "hv",
axis = 'tblr',
# label_fontface = "bold",
# label_fontfamily = "Times New Roman",
label_size = 8,
rel_widths = c(1, 1),
rel_heights = c(1,1),
ncol = 2,
nrow = 2,
hjust = 0.5,
vjust = 0.5
# label_x = 0.01
)
final_plot <- cowplot::plot_grid(title,
main_grid,
ncol=1,
rel_heights=c(0.1, 1))
ggplot2::ggsave(
filename = glue::glue("{id}.png"),
plot = final_plot,
device = "png",
path = file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep),
scale = 4,
width = 600,
height = 810,
units = "px",
dpi = 300,
bg = "white"
)
} else {
pts_sub = pointsdf[pointsdf$xid == id,]
g_plot <- ggplot2::ggplot(pts_sub, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(pts_sub, !is.na(z)),ggplot2::aes(y = z), colour="#fec44f") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
m <- leaflet::leaflet(options = leaflet::leafletOptions(preferCanvas = TRUE)) |>
# leaflet::addProviderTiles("OpenStreetMap",group = "OpenStreetMap") |>
# leaflet::addProviderTiles("Stamen.Toner",group = "Stamen.Toner") |>
leaflet::addProviderTiles("Stamen.Terrain",group = "Stamen.Terrain") |>
# leaflet::addProviderTiles("Esri.WorldStreetMap",group = "Esri.WorldStreetMap") |>
# leaflet::addProviderTiles("Wikimedia",group = "Wikimedia") |>
# leaflet::addProviderTiles("CartoDB.Positron",group = "CartoDB.Positron") |>
leaflet::addProviderTiles("Esri.WorldImagery",group = "Esri.WorldImagery") |>
leafem::addFeatures(p_lines, color = "black",fillColor = 'black',group = "XS") |>
leafem::addFeatures(p_lines[p_lines$xid==id,],  color = "red",fillColor = 'red',group = "XS") |>
leafem::addFeatures(g_hull,opacity = 1,fillOpacity = 0.1,weight = 2,color = 'black',group = "Footprints") |>
leaflet::addLegend("bottomright",colors = c("black","red","black"),
labels = c(paste0("Cross sections"), paste0("Current cross section"), paste0("G model footprint")),
title = "Parsed data",opacity = 1)
mapview::mapshot(m,file=file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png')))
title <- cowplot::ggdraw() + cowplot::draw_label(glue::glue("XS id: {id} from model: {basename(gfile_path)}"), fontface='bold')
main_grid <- cowplot::plot_grid(
g_plot + ggplot2::ggtitle("Parsed from G file") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
ggplot2::ggplot() + ggplot2::ggtitle("Selected XS") + cowplot::draw_image(image = magick::image_read(file.path(outpath,"RRASSLER_images",glue::glue('temp_{id}.png'))),scale = 1.2) + ggplot2::theme_void() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 1.0)),
align = "hv",
axis = 'tblr',
# label_fontface = "bold",
# label_fontfamily = "Times New Roman",
label_size = 8,
rel_widths = c(1, 1),
rel_heights = c(1,1),
ncol = 2,
nrow = 1,
hjust = 0.5,
vjust = 0.5
# label_x = 0.01
)
final_plot <- cowplot::plot_grid(title,
main_grid,
ncol=1,
rel_heights=c(0.1, 1))
ggplot2::ggsave(
filename = glue::glue("{id}.png"),
plot = final_plot,
device = "png",
path = file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep),
scale = 4,
width = 600,
height = 310,
units = "px",
dpi = 300,
bg = "white"
)
}
}
unlink(list.files(file.path(outpath,"RRASSLER_images", fsep=.Platform$file.sep), pattern=utils::glob2rx("temp_*.png$"), full.names=TRUE, ignore.case=TRUE, recursive=TRUE))
}
number_of_cs <- nrow(g_extract[[3]])
if(!equals(number_of_cs,nrow(hdf_extract[[3]]))) {
print("Alert, you broke something")
}
pointsdf <- data.table::as.data.table(points)
pointsdf <- pointsdf[, c("xid_length","n","source","geometry"):=NULL]
p_lines <- sf::st_transform(g_extract[[3]],st_crs("EPSG:4326"))
pointshdf <- data.table::as.data.table(pointshdf)
pointshdf <- pointshdf[, c("xid_length","n","source","geometry"):=NULL]
p_hlines <- sf::st_transform(hdf_extract[[3]],st_crs("EPSG:4326"))
id='1'
tmp_1 <- g_extract[[1]][,c('xid','xid_d','z')][g_extract[[1]]$xid==id,]
tmp_1$series <- 1
tmp_2 <- hdf_extract[[1]][,c('xid','xid_d','z')][hdf_extract[[1]]$xid==id,]
tmp_2$series <- 2
df <- merge(
tmp_1,
tmp_2,
by='xid_d', all=TRUE)
g_plot <- ggplot2::ggplot(df, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(df, !is.na(z.x)),ggplot2::aes(y = z.x), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(df, !is.na(z.x)),ggplot2::aes(y = z.x), colour="#fe9929") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
ghdf_plot <- ggplot2::ggplot(df, ggplot2::aes(x=xid_d)) +
ggplot2::geom_line(data=subset(df, !is.na(z.y)),ggplot2::aes(y = z.y), linewidth=0.43, colour="#ec7014") +
ggplot2::geom_point(data=subset(df, !is.na(z.y)),ggplot2::aes(y = z.y), colour="#cc4c02") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
union_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data=subset(df, !is.na(z.x)),ggplot2::aes(x=xid_d,y = z.x), linewidth=0.43, colour="#fec44f") +
ggplot2::geom_point(data=subset(df, !is.na(z.x)),ggplot2::aes(x=xid_d,y = z.x), colour="#993404") +
ggplot2::geom_line(data=subset(df, !is.na(z.y)),ggplot2::aes(x=xid_d,y = z.y), linewidth=0.43, colour="#ec7014") +
ggplot2::theme_light() + ggplot2::xlab("pt_id (m)") + ggplot2::ylab("z (m)")
union_plot
